#!/bin/bash
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @author    OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright Copyright (c) 2009-2013 Volker Theile
# @copyright Copyright (c) 2013-2015 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

function omv_zfs_for_child_shares() {
    local OMV_NFSD_CONFIG=${OMV_NFSD_CONFIG:-"/etc/exports"}
    local OMV_NFSD_DEFAULT_EXPORT_OPTIONS=${OMV_NFSD_DEFAULT_EXPORT_OPTIONS:-""}
    
    # Load up our settings
    local OMV_ZFS_AUTOSHARE_PROPERTY=$(omv_config_get "//services/zfs/autoShareNestedProperty")
    
    # First, see if there are any NFS shares at all.
    local OMV_NFS_SHARE_COUNT=$(omv_config_get_count "//services/nfs/shares/share")
    
    # Go over each share.
    for INDEX in $(seq 1 ${OMV_NFS_SHARE_COUNT}); do
        # We need to fetch the filesystem type, get there from the mount reference.
    	local OMV_SHARED_FOLDER_REF=$(omv_config_get "//services/nfs/shares/share[${INDEX}]/sharedfolderref")
        local OMV_SHARED_FOLDER_MNT_REF=$(omv_config_get "//shares/sharedfolder/uuid[text()=\"${OMV_SHARED_FOLDER_REF}\"]/../mntentref")
        local OMV_SHARED_FOLDER_FS_TYPE=$(omv_config_get "//fstab/mntent/uuid[text()=\"${OMV_SHARED_FOLDER_MNT_REF}\"]/../type")
    
        # We only need to do more work for zfs.
        if [[ "${OMV_SHARED_FOLDER_FS_TYPE}" = "zfs" ]]; then
            # We need to figure out the shared folder's name and mount path so we
            # can look for nested ZFS filesystems and so we can generate the export
            # path.
            local OMV_BASE_SHARED_FOLDER_FS_NAME=$(omv_config_get "//fstab/mntent/uuid[text()=\"${OMV_SHARED_FOLDER_MNT_REF}\"]/../fsname")
            local OMV_BASE_SHARED_FOLDER_NAME=$(omv_get_sharedfolder_name ${OMV_SHARED_FOLDER_REF})
            local OMV_BASE_SHARED_FOLDER_MNT_PATH=$(omv_config_get "//fstab/mntent/uuid[text()=\"${OMV_SHARED_FOLDER_MNT_REF}\"]/../dir")
           
            # If we have the autoshare property set, check to make sure it's either
            # unset on this share, or set to "true". If it's set to false, skip it, if
            # it's set to anything else, puke.
            if [[ ! -z "${OMV_ZFS_AUTOSHARE_PROPERTY}" ]]; then
                local OMV_ZFS_AUTOSHARE=$(zfs get -H ${OMV_ZFS_AUTOSHARE_PROPERTY} "${OMV_BASE_SHARED_FOLDER_FS_NAME}" | awk '{print tolower($3)}')
                
                if [[ "${OMV_ZFS_AUTOSHARE}" = "-" || "${OMV_ZFS_AUTOSHARE}" = "false" ]]; then
                    if [[ ! -z $2 ]]; then
                        $2 "${OMV_NFSD_EXPORT_DIR}/${OMV_BASE_SHARED_FOLDER_NAME}/*" "${OMV_BASE_SHARED_FOLDER_MNT_PATH}"
                    fi
                    continue
                elif [[ ! "${OMV_ZFS_AUTOSHARE}" = "true" ]]; then
                    echo "${OMV_ZFS_AUTOSHARE} is not a valid setting for ${OMV_ZFS_AUTOSHARE_PROPERTY} on ${OMV_BASE_SHARED_FOLDER_FS_NAME}." 1>&2
                    exit 1
                fi
            fi
           
            # Ask ZFS for the list of filesystems and grep for any that are contained by
            # the file system we're looking at.
            #
            # A little about the insane command here, here's what we're doing:
            # - List all ZFS filesystems
            # - Filter them to only those that have the base mount path in them
            # - Use awk to print the last column, but the last column is the mountpoint,
            #   which could contain spaces. So:
            # - Iterate over all columns after the 5th and concatenate them into "s".
            #   But this is going to leave a space on the end. So:
            # - Take the substring of everything except the last character. However,
            #   now the string passed to the for loop might have spaces. So:
            # - Store the delimiter value IFS into SAVEIFS, reset it to newlines.
            # - Be sure to restore it after the for loop.
            local SAVEIFS=${IFS}
            local IFS=$(echo -en "\n\b")
            for CHILD_MNT_PATH in $(zfs list | grep "${OMV_BASE_SHARED_FOLDER_MNT_PATH}/" |  awk '{s=""; for(i=5;i<=NF;i++) s=s $i " "; s=substr(s, 0, length(s)); print s }'); do
                # We need to make sure that this nested FS hasn't been manually
                # exported by someone. We'll find it's mount reference, if it exists,
                # then check to see if there are any shared folders.
                local OMV_CHILD_MNT_REF=$(omv_config_get "//fstab/mntent/dir[text()=\"${CHILD_MNT_PATH}\"]/../uuid")
        
                # Get the relative path of the child, then make sure we cut off any leading slashes.
                local OMV_CHILD_RELATIVE_PATH=${CHILD_MNT_PATH:${#OMV_BASE_SHARED_FOLDER_MNT_PATH}}
           
                if [[ "${OMV_CHILD_RELATIVE_PATH:0:1}" = "/" ]]; then
                    OMV_CHILD_RELATIVE_PATH=${OMV_CHILD_RELATIVE_PATH:1}
                fi
                
                # Figure out the export path of the child
                local OMV_CHILD_EXPORT_PATH="${OMV_NFSD_EXPORT_DIR}/${OMV_BASE_SHARED_FOLDER_NAME}/${OMV_CHILD_RELATIVE_PATH}"
        
                if [[ -z "${OMV_CHILD_MNT_REF}" || $(omv_config_get_count "//services/nfs/shares/share/mntentref[text()=\"${OMV_CHILD_MNT_REF}\"]") = "0" ]]; then
                    # If we have the autoshare property set, check to make sure it's
                    # set to true on this child. It cannot be unset as that would mean
                    # it's also unset on the parent.
                    if [[ ! -z "${OMV_ZFS_AUTOSHARE_PROPERTY}" ]]; then
                        local OMV_ZFS_AUTOSHARE=$(zfs get -H ${OMV_ZFS_AUTOSHARE_PROPERTY} "${CHILD_MNT_PATH}" | awk '{print tolower($3)}')
                        
                        if [[ "${OMV_ZFS_AUTOSHARE}" = "false" ]]; then
                            if [[ ! -z $2 ]]; then
                                $2 "${OMV_CHILD_EXPORT_PATH}" "${CHILD_MNT_PATH}"
                            fi
                            continue
                        elif [[ ! "${OMV_ZFS_AUTOSHARE}" = "true" ]]; then
                            echo "${OMV_ZFS_AUTOSHARE} is not a valid setting for ${OMV_ZFS_AUTOSHARE_PROPERTY} on ${CHILD_MNT_PATH}." 1>&2
                            exit 1
                        fi
                    fi
                    
                    # Execute the function passed to us passing it the shared folder UUID, the
                    # shared folder mount path, and the export path.
                    local OMV_NFS_SHARE_UUID=$(omv_config_get "//services/nfs/shares/share[${INDEX}]/uuid")
                    $1 "${OMV_CHILD_EXPORT_PATH}" "${CHILD_MNT_PATH}" "${OMV_NFS_SHARE_UUID}" 
                else
                    if [[ ! -z $2 ]]; then
                        $2 "${OMV_CHILD_EXPORT_PATH}" "${CHILD_MNT_PATH}"
                    fi
                fi
            done
            
            IFS=${SAVEIFS}
        fi
    done
}
